type Query {
  allCharacters: [Character!]!
  character(id: ID!): Character
  allPlanets: [Planet!]!
  planet(id: ID!): Planet
  allStarships: [Starship!]!
  starship(id: ID!): Starship
  allFilms: [Film!]!
  film(id: ID!): Film
}

type Mutation {
  createPlanet(input: CreatePlanetInput!): Planet
  updatePlanet(input: UpdatePlanetInput!): Planet
  deletePlanet(id: ID!): Boolean
  createCharacter(input: CreateCharacterInput!): Character
  updateCharacter(input: UpdateCharacterInput!): Character
  deleteCharacter(id: ID!): Boolean
  createStarship(input: CreateStarshipInput!): Starship
  updateStarship(input: UpdateStarshipInput!): Starship
  deleteStarship(id: ID!): Boolean
  assignStarship(input: AssignStarshipInput!): Character
  
  # Film mutations
  createFilm(input: CreateFilmInput!): Film
  updateFilm(input: UpdateFilmInput!): Film
  deleteFilm(id: ID!): Boolean
  
  # Film relationship mutations
  addCharacterToFilm(input: FilmCharacterInput!): Film
  removeCharacterFromFilm(input: FilmCharacterInput!): Film
  addPlanetToFilm(input: FilmPlanetInput!): Film
  removePlanetFromFilm(input: FilmPlanetInput!): Film
  addStarshipToFilm(input: FilmStarshipInput!): Film
  removeStarshipFromFilm(input: FilmStarshipInput!): Film
}

input CreatePlanetInput {
  name: String!
  climate: String
  terrain: String
}

input UpdatePlanetInput {
  id: ID!
  name: String
  climate: String
  terrain: String
}

input CreateCharacterInput {
  name: String!
  species: String
  homePlanetId: Int
}

input UpdateCharacterInput {
  id: ID!
  name: String
  species: String
  homePlanetId: Int
}

input CreateStarshipInput {
  name: String!
  model: String
  manufacturer: String
}

input UpdateStarshipInput {
  id: ID!
  name: String
  model: String
  manufacturer: String
}

input AssignStarshipInput {
  characterId: ID!
  starshipId: ID!
}

input CreateFilmInput {
  title: String!
  episodeId: Int
  director: String
  releaseDate: String
  openingCrawl: String
}

input UpdateFilmInput {
  id: ID!
  title: String
  episodeId: Int
  director: String
  releaseDate: String
  openingCrawl: String
}

input FilmCharacterInput {
  filmId: ID!
  characterId: ID!
}

input FilmPlanetInput {
  filmId: ID!
  planetId: ID!
}

input FilmStarshipInput {
  filmId: ID!
  starshipId: ID!
}

type Character {
  id: ID!
  name: String!
  species: String
  homePlanet: Planet
  pilotedStarships: [Starship!]!
  appearsIn: [Film!]!
}

type Planet {
  id: ID!
  name: String!
  climate: String
  terrain: String
  residents: [Character!]!
  appearsIn: [Film!]!
}

type Starship {
  id: ID!
  name: String!
  model: String
  manufacturer: String
  pilots: [Character!]!
  appearsIn: [Film!]!
}

type Film {
  id: ID!
  title: String!
  episodeId: Int
  director: String
  releaseDate: String
  openingCrawl: String
  characters: [Character!]!
  planets: [Planet!]!
  starships: [Starship!]!
}